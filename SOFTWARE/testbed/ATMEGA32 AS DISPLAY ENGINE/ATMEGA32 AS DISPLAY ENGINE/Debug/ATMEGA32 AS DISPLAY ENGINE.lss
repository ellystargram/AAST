
ATMEGA32 AS DISPLAY ENGINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018a  00800060  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001ea  008001ea  000004f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e8  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059c  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f0  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000387  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000109  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa ee       	ldi	r26, 0xEA	; 234
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3f       	cpi	r26, 0xF5	; 245
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  8a:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup_>:
    }
}

void setup_(void){
	
	DDRA=0xf0;
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xff;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;
  9a:	81 bb       	out	0x11, r24	; 17
	
	TCCR1A=0;
  9c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<WGM12)|(1<<CS12);
  9e:	8c e0       	ldi	r24, 0x0C	; 12
  a0:	8e bd       	out	0x2e, r24	; 46
	OCR1A=128;//adjust here
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	9b bd       	out	0x2b, r25	; 43
  a8:	8a bd       	out	0x2a, r24	; 42
	TIMSK=1<<OCIE1A;
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	89 bf       	out	0x39, r24	; 57
	
	
	sei();
  ae:	78 94       	sei
  b0:	08 95       	ret

000000b2 <update_>:
}
void update_(void){
	unsigned char _value_pre=PINA&0x0f;
  b2:	39 b3       	in	r19, 0x19	; 25
  b4:	3f 70       	andi	r19, 0x0F	; 15
	if(_value_pre!=_value_in){
  b6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <_value_in>
  ba:	38 17       	cp	r19, r24
  bc:	c1 f0       	breq	.+48     	; 0xee <update_+0x3c>
		_value_in=_value_pre;
  be:	30 93 ee 01 	sts	0x01EE, r19	; 0x8001ee <_value_in>
		_moveanimation=0;
  c2:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <_moveanimation>
		for(unsigned char _mask=0; _mask<4;_mask++){
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	10 c0       	rjmp	.+32     	; 0xea <update_+0x38>
			_text_4digit[_mask]=_text[_value_in][_mask];
  ca:	82 2f       	mov	r24, r18
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	40 e4       	ldi	r20, 0x40	; 64
  d0:	34 9f       	mul	r19, r20
  d2:	f0 01       	movw	r30, r0
  d4:	11 24       	eor	r1, r1
  d6:	e6 55       	subi	r30, 0x56	; 86
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	e8 0f       	add	r30, r24
  dc:	f9 1f       	adc	r31, r25
  de:	40 81       	ld	r20, Z
  e0:	fc 01       	movw	r30, r24
  e2:	e0 51       	subi	r30, 0x10	; 16
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	40 83       	st	Z, r20
void update_(void){
	unsigned char _value_pre=PINA&0x0f;
	if(_value_pre!=_value_in){
		_value_in=_value_pre;
		_moveanimation=0;
		for(unsigned char _mask=0; _mask<4;_mask++){
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	24 30       	cpi	r18, 0x04	; 4
  ec:	70 f3       	brcs	.-36     	; 0xca <update_+0x18>
  ee:	08 95       	ret

000000f0 <main>:
void setup_(void);
void update_(void);

int main(void)
{
	setup_();
  f0:	0e 94 49 00 	call	0x92	; 0x92 <setup_>
    /* Replace with your application code */
    while (1) 
    {
		update_();
  f4:	0e 94 59 00 	call	0xb2	; 0xb2 <update_>
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <main+0x4>

000000fa <__vector_7>:
			_text_4digit[_mask]=_text[_value_in][_mask];
		}
	}
}

ISR(TIMER1_COMPA_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	if(++_display_repeat==5){
 11c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <_display_repeat>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_display_repeat>
 126:	85 30       	cpi	r24, 0x05	; 5
 128:	09 f0       	breq	.+2      	; 0x12c <__vector_7+0x32>
 12a:	ae c0       	rjmp	.+348    	; 0x288 <__vector_7+0x18e>
		_display_repeat=0;
 12c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <_display_repeat>
		PORTA=~(1<<(4+_digit));
 130:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <_digit>
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	2c 5f       	subi	r18, 0xFC	; 252
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__vector_7+0x4a>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	2a 95       	dec	r18
 146:	e2 f7       	brpl	.-8      	; 0x140 <__vector_7+0x46>
 148:	80 95       	com	r24
 14a:	8b bb       	out	0x1b, r24	; 27
		if(_text_4digit[_digit]>='0'&&_text_4digit[_digit]<='9'){//if number
 14c:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <_digit>
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e0 51       	subi	r30, 0x10	; 16
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	e0 81       	ld	r30, Z
 158:	80 ed       	ldi	r24, 0xD0	; 208
 15a:	8e 0f       	add	r24, r30
 15c:	8a 30       	cpi	r24, 0x0A	; 10
 15e:	b8 f4       	brcc	.+46     	; 0x18e <__vector_7+0x94>
			PORTC=_14segment[_text_4digit[_digit]-0x30];
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	f0 97       	sbiw	r30, 0x30	; 48
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	e0 5a       	subi	r30, 0xA0	; 160
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	80 81       	ld	r24, Z
 16e:	85 bb       	out	0x15, r24	; 21
			PORTD=_14segment[_text_4digit[_digit]-0x30]>>8;
 170:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <_digit>
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e0 51       	subi	r30, 0x10	; 16
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	e0 81       	ld	r30, Z
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	f0 97       	sbiw	r30, 0x30	; 48
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e0 5a       	subi	r30, 0xA0	; 160
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	81 81       	ldd	r24, Z+1	; 0x01
 18a:	82 bb       	out	0x12, r24	; 18
 18c:	1a c0       	rjmp	.+52     	; 0x1c2 <__vector_7+0xc8>
		}
		else if(_text_4digit[_digit]>='A'&&_text_4digit[_digit]<='Z'){//if ENGLISH
 18e:	8f eb       	ldi	r24, 0xBF	; 191
 190:	8e 0f       	add	r24, r30
 192:	8a 31       	cpi	r24, 0x1A	; 26
 194:	b0 f4       	brcc	.+44     	; 0x1c2 <__vector_7+0xc8>
			PORTC=_14segment[_text_4digit[_digit]-0x41+10];
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	f7 97       	sbiw	r30, 0x37	; 55
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	e0 5a       	subi	r30, 0xA0	; 160
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	80 81       	ld	r24, Z
 1a4:	85 bb       	out	0x15, r24	; 21
			PORTD=_14segment[_text_4digit[_digit]-0x41+10]>>8;
 1a6:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <_digit>
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	e0 51       	subi	r30, 0x10	; 16
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	e0 81       	ld	r30, Z
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	f7 97       	sbiw	r30, 0x37	; 55
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	e0 5a       	subi	r30, 0xA0	; 160
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	81 81       	ldd	r24, Z+1	; 0x01
 1c0:	82 bb       	out	0x12, r24	; 18
		}
		
		if(_digit<3){
 1c2:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <_digit>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	20 f4       	brcc	.+8      	; 0x1d2 <__vector_7+0xd8>
			_digit++;
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <_digit>
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <__vector_7+0xdc>
		}
		else{
			_digit=0;
 1d2:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <_digit>
		}
		if(++_animation_repeat==50){
 1d6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
 1da:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <__data_end+0x1>
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <__data_end+0x1>
 1e4:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <__data_end>
 1e8:	c2 97       	sbiw	r24, 0x32	; 50
 1ea:	09 f0       	breq	.+2      	; 0x1ee <__vector_7+0xf4>
 1ec:	4d c0       	rjmp	.+154    	; 0x288 <__vector_7+0x18e>
			_animation_repeat=0;
 1ee:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <__data_end+0x1>
 1f2:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__data_end>
			for(unsigned char _mask=0; _mask<4;_mask++){
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	22 c0       	rjmp	.+68     	; 0x23e <__vector_7+0x144>
				_text_4digit[_mask]=_text[_value_in][(_mask+_moveanimation)%(strlen((char *)_text[_value_in]))];
 1fa:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <_value_in>
 1fe:	24 2f       	mov	r18, r20
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <_moveanimation>
 206:	b9 01       	movw	r22, r18
 208:	68 0f       	add	r22, r24
 20a:	71 1d       	adc	r23, r1
 20c:	cb 01       	movw	r24, r22
 20e:	70 e4       	ldi	r23, 0x40	; 64
 210:	e7 9f       	mul	r30, r23
 212:	f0 01       	movw	r30, r0
 214:	11 24       	eor	r1, r1
 216:	e6 55       	subi	r30, 0x56	; 86
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	df 01       	movw	r26, r30
 21c:	0d 90       	ld	r0, X+
 21e:	00 20       	and	r0, r0
 220:	e9 f7       	brne	.-6      	; 0x21c <__vector_7+0x122>
 222:	11 97       	sbiw	r26, 0x01	; 1
 224:	bd 01       	movw	r22, r26
 226:	6e 1b       	sub	r22, r30
 228:	7f 0b       	sbc	r23, r31
 22a:	0e 94 55 01 	call	0x2aa	; 0x2aa <__udivmodhi4>
 22e:	e8 0f       	add	r30, r24
 230:	f9 1f       	adc	r31, r25
 232:	80 81       	ld	r24, Z
 234:	f9 01       	movw	r30, r18
 236:	e0 51       	subi	r30, 0x10	; 16
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	80 83       	st	Z, r24
		else{
			_digit=0;
		}
		if(++_animation_repeat==50){
			_animation_repeat=0;
			for(unsigned char _mask=0; _mask<4;_mask++){
 23c:	4f 5f       	subi	r20, 0xFF	; 255
 23e:	44 30       	cpi	r20, 0x04	; 4
 240:	e0 f2       	brcs	.-72     	; 0x1fa <__vector_7+0x100>
				_text_4digit[_mask]=_text[_value_in][(_mask+_moveanimation)%(strlen((char *)_text[_value_in]))];
			}
			_moveanimation=(_moveanimation+1)%(strlen((char *)_text[_value_in]));
 242:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <_moveanimation>
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	01 96       	adiw	r24, 0x01	; 1
 24a:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <_value_in>
 24e:	20 e4       	ldi	r18, 0x40	; 64
 250:	e2 9f       	mul	r30, r18
 252:	f0 01       	movw	r30, r0
 254:	11 24       	eor	r1, r1
 256:	e6 55       	subi	r30, 0x56	; 86
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	df 01       	movw	r26, r30
 25c:	0d 90       	ld	r0, X+
 25e:	00 20       	and	r0, r0
 260:	e9 f7       	brne	.-6      	; 0x25c <__vector_7+0x162>
 262:	11 97       	sbiw	r26, 0x01	; 1
 264:	bd 01       	movw	r22, r26
 266:	6e 1b       	sub	r22, r30
 268:	7f 0b       	sbc	r23, r31
 26a:	0e 94 55 01 	call	0x2aa	; 0x2aa <__udivmodhi4>
 26e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <_moveanimation>
			if(strlen((char *)_text[_value_in])==4){
 272:	df 01       	movw	r26, r30
 274:	0d 90       	ld	r0, X+
 276:	00 20       	and	r0, r0
 278:	e9 f7       	brne	.-6      	; 0x274 <__vector_7+0x17a>
 27a:	11 97       	sbiw	r26, 0x01	; 1
 27c:	ae 1b       	sub	r26, r30
 27e:	bf 0b       	sbc	r27, r31
 280:	14 97       	sbiw	r26, 0x04	; 4
 282:	11 f4       	brne	.+4      	; 0x288 <__vector_7+0x18e>
				_moveanimation=0;
 284:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <_moveanimation>
			}
		}
	}
	
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <__udivmodhi4>:
 2aa:	aa 1b       	sub	r26, r26
 2ac:	bb 1b       	sub	r27, r27
 2ae:	51 e1       	ldi	r21, 0x11	; 17
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <__udivmodhi4_ep>

000002b2 <__udivmodhi4_loop>:
 2b2:	aa 1f       	adc	r26, r26
 2b4:	bb 1f       	adc	r27, r27
 2b6:	a6 17       	cp	r26, r22
 2b8:	b7 07       	cpc	r27, r23
 2ba:	10 f0       	brcs	.+4      	; 0x2c0 <__udivmodhi4_ep>
 2bc:	a6 1b       	sub	r26, r22
 2be:	b7 0b       	sbc	r27, r23

000002c0 <__udivmodhi4_ep>:
 2c0:	88 1f       	adc	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	5a 95       	dec	r21
 2c6:	a9 f7       	brne	.-22     	; 0x2b2 <__udivmodhi4_loop>
 2c8:	80 95       	com	r24
 2ca:	90 95       	com	r25
 2cc:	bc 01       	movw	r22, r24
 2ce:	cd 01       	movw	r24, r26
 2d0:	08 95       	ret

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
