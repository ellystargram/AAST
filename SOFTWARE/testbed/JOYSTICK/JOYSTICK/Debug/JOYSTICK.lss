
JOYSTICK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003b4  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080010c  0080010c  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3a  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000450  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dd  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000189  00000000  00000000  000021d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c1       	rjmp	.+840    	; 0x372 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2c c1       	rjmp	.+600    	; 0x29a <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	80 c0       	rjmp	.+256    	; 0x156 <__vector_21>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	46 d0       	rcall	.+140    	; 0x150 <main>
  c4:	75 c1       	rjmp	.+746    	; 0x3b0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <setup_>:
		update_();
    }
}

void setup_(void){
	DDRA=0xff;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
  cc:	87 bb       	out	0x17, r24	; 23
	DDRC=0xff;
  ce:	84 bb       	out	0x14, r24	; 20
	DDRF=0x00;
  d0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG=0b111110;
  d4:	8e e3       	ldi	r24, 0x3E	; 62
  d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	PORTG=0xfe;
  da:	8e ef       	ldi	r24, 0xFE	; 254
  dc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	
	TCCR0=7;
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	83 bf       	out	0x33, r24	; 51
	TCNT0=_x_default;
  e4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_x_default>
  e8:	82 bf       	out	0x32, r24	; 50
	TCCR2=3;
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	85 bd       	out	0x25, r24	; 37
	TCNT2=0;
  ee:	14 bc       	out	0x24, r1	; 36
	TIMSK=(1<<TOIE0)|(1<<TOIE2);
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	87 bf       	out	0x37, r24	; 55
	
	sei();
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <update_>:
}
void update_(void){
	
	_ADCPIN_selector=!_ADCPIN_selector;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_ADCPIN_selector>
  fe:	91 11       	cpse	r25, r1
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ADCPIN_selector>
	
	if(_ADCPIN_selector==X){
 106:	81 11       	cpse	r24, r1
 108:	02 c0       	rjmp	.+4      	; 0x10e <update_+0x16>
		ADMUX=0x00;
 10a:	17 b8       	out	0x07, r1	; 7
 10c:	02 c0       	rjmp	.+4      	; 0x112 <update_+0x1a>
	}
	else{
		ADMUX=0x01;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	87 b9       	out	0x07, r24	; 7
	}
	ADCSRA=0b11001111;
 112:	8f ec       	ldi	r24, 0xCF	; 207
 114:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA&0b00010000==0);
 116:	86 b1       	in	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f e9       	ldi	r24, 0x9F	; 159
 11a:	9f e0       	ldi	r25, 0x0F	; 15
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <update_+0x24>
 120:	00 c0       	rjmp	.+0      	; 0x122 <update_+0x2a>
 122:	00 00       	nop
	_delay_ms(1);
	
	if(PING&1==1){
 124:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 128:	80 ff       	sbrs	r24, 0
 12a:	04 c0       	rjmp	.+8      	; 0x134 <update_+0x3c>
		_triggered=1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	02 c0       	rjmp	.+4      	; 0x138 <update_+0x40>
	}
	else{
		_triggered=0;
 134:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

	if(_triggered==1){
 138:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	19 f4       	brne	.+6      	; 0x146 <update_+0x4e>
		TCCR2=3;
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	85 bd       	out	0x25, r24	; 37
 144:	08 95       	ret
	}
	else{
		_fire=1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_fire>
		TCCR2=0;
 14c:	15 bc       	out	0x25, r1	; 37
 14e:	08 95       	ret

00000150 <main>:
unsigned char _fire=1;
unsigned char _triggered=1;

int main(void)
{
	setup_();
 150:	bb df       	rcall	.-138    	; 0xc8 <setup_>
    /* Replace with your application code */
    while (1) 
    {
		update_();
 152:	d2 df       	rcall	.-92     	; 0xf8 <update_>
 154:	fe cf       	rjmp	.-4      	; 0x152 <main+0x2>

00000156 <__vector_21>:
 156:	1f 92       	push	r1
	
	
	
}

ISR(ADC_vect){
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	3f 93       	push	r19
 164:	4f 93       	push	r20
 166:	5f 93       	push	r21
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
	switch(_ADCPIN_selector){
 16c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ADCPIN_selector>
 170:	88 23       	and	r24, r24
 172:	21 f0       	breq	.+8      	; 0x17c <__vector_21+0x26>
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	09 f4       	brne	.+2      	; 0x17a <__vector_21+0x24>
 178:	45 c0       	rjmp	.+138    	; 0x204 <__vector_21+0xae>
 17a:	84 c0       	rjmp	.+264    	; 0x284 <__vector_21+0x12e>
		case X:
		_x = ADCW;
 17c:	84 b1       	in	r24, 0x04	; 4
 17e:	95 b1       	in	r25, 0x05	; 5
 180:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_x+0x1>
 184:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_x>
		if(_x<= 522&& _x>=502){
 188:	9c 01       	movw	r18, r24
 18a:	26 5f       	subi	r18, 0xF6	; 246
 18c:	31 40       	sbci	r19, 0x01	; 1
 18e:	25 31       	cpi	r18, 0x15	; 21
 190:	31 05       	cpc	r19, r1
 192:	a0 f4       	brcc	.+40     	; 0x1bc <__vector_21+0x66>
			PORTB=~((_fire<<4)|(_fire<<3));
 194:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_fire>
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	9c 01       	movw	r18, r24
 19c:	22 95       	swap	r18
 19e:	32 95       	swap	r19
 1a0:	30 7f       	andi	r19, 0xF0	; 240
 1a2:	32 27       	eor	r19, r18
 1a4:	20 7f       	andi	r18, 0xF0	; 240
 1a6:	32 27       	eor	r19, r18
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	82 2b       	or	r24, r18
 1b6:	80 95       	com	r24
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	11 c0       	rjmp	.+34     	; 0x1de <__vector_21+0x88>
		}
		else{
			PORTB=~(_fire<<(_x/128));
 1bc:	88 0f       	add	r24, r24
 1be:	89 2f       	mov	r24, r25
 1c0:	88 1f       	adc	r24, r24
 1c2:	99 0b       	sbc	r25, r25
 1c4:	91 95       	neg	r25
 1c6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <_fire>
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	a9 01       	movw	r20, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_21+0x7e>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	8a 95       	dec	r24
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <__vector_21+0x7a>
 1d8:	ca 01       	movw	r24, r20
 1da:	80 95       	com	r24
 1dc:	88 bb       	out	0x18, r24	; 24
		}
		_x_default=abs(_x/4-128);
 1de:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_x>
 1e2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_x+0x1>
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	96 95       	lsr	r25
 1ec:	87 95       	ror	r24
 1ee:	80 58       	subi	r24, 0x80	; 128
 1f0:	91 09       	sbc	r25, r1
 1f2:	9c 01       	movw	r18, r24
 1f4:	22 f4       	brpl	.+8      	; 0x1fe <__vector_21+0xa8>
 1f6:	22 27       	eor	r18, r18
 1f8:	33 27       	eor	r19, r19
 1fa:	28 1b       	sub	r18, r24
 1fc:	39 0b       	sbc	r19, r25
 1fe:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <_x_default>
		break;
 202:	40 c0       	rjmp	.+128    	; 0x284 <__vector_21+0x12e>
		case Y:
		_y=ADCW;
 204:	84 b1       	in	r24, 0x04	; 4
 206:	95 b1       	in	r25, 0x05	; 5
 208:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_y+0x1>
 20c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_y>
		if(_y<=522&&_y>=502){
 210:	9c 01       	movw	r18, r24
 212:	26 5f       	subi	r18, 0xF6	; 246
 214:	31 40       	sbci	r19, 0x01	; 1
 216:	25 31       	cpi	r18, 0x15	; 21
 218:	31 05       	cpc	r19, r1
 21a:	98 f4       	brcc	.+38     	; 0x242 <__vector_21+0xec>
			PORTC=((_fire<<4)|(_fire<<3));
 21c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_fire>
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9c 01       	movw	r18, r24
 224:	22 95       	swap	r18
 226:	32 95       	swap	r19
 228:	30 7f       	andi	r19, 0xF0	; 240
 22a:	32 27       	eor	r19, r18
 22c:	20 7f       	andi	r18, 0xF0	; 240
 22e:	32 27       	eor	r19, r18
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	82 2b       	or	r24, r18
 23e:	85 bb       	out	0x15, r24	; 21
 240:	0f c0       	rjmp	.+30     	; 0x260 <__vector_21+0x10a>
		}
		else{
			PORTC=(_fire<<(_y/128));
 242:	88 0f       	add	r24, r24
 244:	89 2f       	mov	r24, r25
 246:	88 1f       	adc	r24, r24
 248:	99 0b       	sbc	r25, r25
 24a:	91 95       	neg	r25
 24c:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <_fire>
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	a9 01       	movw	r20, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <__vector_21+0x104>
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	8a 95       	dec	r24
 25c:	e2 f7       	brpl	.-8      	; 0x256 <__vector_21+0x100>
 25e:	45 bb       	out	0x15, r20	; 21
		}
		_y_default=abs(_y/4-128);
 260:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_y>
 264:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_y+0x1>
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	80 58       	subi	r24, 0x80	; 128
 272:	91 09       	sbc	r25, r1
 274:	9c 01       	movw	r18, r24
 276:	22 f4       	brpl	.+8      	; 0x280 <__vector_21+0x12a>
 278:	22 27       	eor	r18, r18
 27a:	33 27       	eor	r19, r19
 27c:	28 1b       	sub	r18, r24
 27e:	39 0b       	sbc	r19, r25
 280:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <_y_default>
		break;
	}
}
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_16>:

ISR(TIMER0_OVF_vect){
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	0b b6       	in	r0, 0x3b	; 59
 2a6:	0f 92       	push	r0
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	TCNT0=_x_default;
 2b4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_x_default>
 2b8:	82 bf       	out	0x32, r24	; 50
	_timer0_timer++;
 2ba:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_timer0_timer>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_timer0_timer>
	if(_timer0_timer==20){
 2c4:	84 31       	cpi	r24, 0x14	; 20
 2c6:	09 f0       	breq	.+2      	; 0x2ca <__vector_16+0x30>
 2c8:	47 c0       	rjmp	.+142    	; 0x358 <__vector_16+0xbe>
		_timer0_timer=0;
 2ca:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <_timer0_timer>
		_porta_output=_porta_output&0xf0;
 2ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_porta_output>
 2d2:	80 7f       	andi	r24, 0xF0	; 240
		if(_x<(1023/2)){
 2d4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <_x>
 2d8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <_x+0x1>
 2dc:	2f 3f       	cpi	r18, 0xFF	; 255
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	39 07       	cpc	r19, r25
 2e2:	a0 f4       	brcc	.+40     	; 0x30c <__vector_16+0x72>
			_porta_output=_porta_output|_motor_drive[_timer0_motor_count];
 2e4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 2e8:	e9 2f       	mov	r30, r25
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ee 5f       	subi	r30, 0xFE	; 254
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	20 81       	ld	r18, Z
 2f2:	82 2b       	or	r24, r18
 2f4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_porta_output>
			if(_timer0_motor_count==0){
 2f8:	91 11       	cpse	r25, r1
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <__vector_16+0x6a>
				_timer0_motor_count=7;
 2fc:	87 e0       	ldi	r24, 0x07	; 7
 2fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 302:	27 c0       	rjmp	.+78     	; 0x352 <__vector_16+0xb8>
			}
			else{
				_timer0_motor_count--;
 304:	91 50       	subi	r25, 0x01	; 1
 306:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_end>
 30a:	23 c0       	rjmp	.+70     	; 0x352 <__vector_16+0xb8>
			}
		}
		else if(_x>(1023/2)){
 30c:	21 15       	cp	r18, r1
 30e:	32 40       	sbci	r19, 0x02	; 2
 310:	b8 f0       	brcs	.+46     	; 0x340 <__vector_16+0xa6>
			_porta_output=_porta_output|_motor_drive[_timer0_motor_count];
 312:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	f9 01       	movw	r30, r18
 31a:	ee 5f       	subi	r30, 0xFE	; 254
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	90 81       	ld	r25, Z
 320:	89 2b       	or	r24, r25
 322:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_porta_output>
			_timer0_motor_count=(_timer0_motor_count+1)%8;
 326:	c9 01       	movw	r24, r18
 328:	01 96       	adiw	r24, 0x01	; 1
 32a:	87 70       	andi	r24, 0x07	; 7
 32c:	90 78       	andi	r25, 0x80	; 128
 32e:	99 23       	and	r25, r25
 330:	24 f4       	brge	.+8      	; 0x33a <__vector_16+0xa0>
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	88 6f       	ori	r24, 0xF8	; 248
 336:	9f 6f       	ori	r25, 0xFF	; 255
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 33e:	09 c0       	rjmp	.+18     	; 0x352 <__vector_16+0xb8>
		}
		else{
			_porta_output=_porta_output|_motor_drive[_timer0_motor_count];
 340:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	ee 5f       	subi	r30, 0xFE	; 254
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	90 81       	ld	r25, Z
 34c:	89 2b       	or	r24, r25
 34e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_porta_output>
		}
		PORTA=_porta_output;
 352:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_porta_output>
 356:	8b bb       	out	0x1b, r24	; 27
	}
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0b be       	out	0x3b, r0	; 59
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <__vector_10>:
ISR(TIMER2_OVF_vect){
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
	TCNT2=0;
 380:	14 bc       	out	0x24, r1	; 36
	_timer2_timer++;
 382:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_timer2_timer>
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_timer2_timer>
	if(_timer2_timer==100){
 38c:	84 36       	cpi	r24, 0x64	; 100
 38e:	49 f4       	brne	.+18     	; 0x3a2 <__vector_10+0x30>
		_timer2_timer=0;
 390:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <_timer2_timer>
		_fire=!_fire;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_fire>
 39a:	91 11       	cpse	r25, r1
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_fire>
	}
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	0f 90       	pop	r0
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	0f 90       	pop	r0
 3ac:	1f 90       	pop	r1
 3ae:	18 95       	reti

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
