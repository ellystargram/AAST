
ATMEGA8 AS DISPLAY ENGINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  0000028e  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008001a8  008001a8  0000046a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068e  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000547  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fa  00000000  00000000  000010e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000369  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f0  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	5b c0       	rjmp	.+182    	; 0xc4 <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e8       	ldi	r30, 0x8E	; 142
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 3a       	cpi	r26, 0xA8	; 168
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a8 ea       	ldi	r26, 0xA8	; 168
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 3b       	cpi	r26, 0xB3	; 179
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	32 d0       	rcall	.+100    	; 0xbe <main>
  5a:	17 c1       	rjmp	.+558    	; 0x28a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <setup_>:
    }
}

void setup_(void){
	
	DDRB=0xf0;
  5e:	80 ef       	ldi	r24, 0xF0	; 240
  60:	87 bb       	out	0x17, r24	; 23
	DDRC=0x7f;
  62:	8f e7       	ldi	r24, 0x7F	; 127
  64:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	81 bb       	out	0x11, r24	; 17
	
	TCCR1A=0;
  6a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<WGM12)|(1<<CS12);
  6c:	8c e0       	ldi	r24, 0x0C	; 12
  6e:	8e bd       	out	0x2e, r24	; 46
	OCR1A=128;//adjust here
  70:	80 e8       	ldi	r24, 0x80	; 128
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	9b bd       	out	0x2b, r25	; 43
  76:	8a bd       	out	0x2a, r24	; 42
	TIMSK=1<<OCIE1A;
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	89 bf       	out	0x39, r24	; 57
	
	
	sei();
  7c:	78 94       	sei
  7e:	08 95       	ret

00000080 <update_>:
}
void update_(void){
	unsigned char _value_pre=PINB&0x0f;
  80:	36 b3       	in	r19, 0x16	; 22
  82:	3f 70       	andi	r19, 0x0F	; 15
	if(_value_pre!=_value_in){
  84:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <_value_in>
  88:	38 17       	cp	r19, r24
  8a:	c1 f0       	breq	.+48     	; 0xbc <update_+0x3c>
		_value_in=_value_pre;
  8c:	30 93 ac 01 	sts	0x01AC, r19	; 0x8001ac <_value_in>
		_moveanimation=0;
  90:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <_moveanimation>
		for(unsigned char _mask=0; _mask<4;_mask++){
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	10 c0       	rjmp	.+32     	; 0xb8 <update_+0x38>
			_text_4digit[_mask]=_text[_value_in][_mask];
  98:	82 2f       	mov	r24, r18
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	40 e4       	ldi	r20, 0x40	; 64
  9e:	34 9f       	mul	r19, r20
  a0:	f0 01       	movw	r30, r0
  a2:	11 24       	eor	r1, r1
  a4:	e8 55       	subi	r30, 0x58	; 88
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	e8 0f       	add	r30, r24
  aa:	f9 1f       	adc	r31, r25
  ac:	40 81       	ld	r20, Z
  ae:	fc 01       	movw	r30, r24
  b0:	e2 55       	subi	r30, 0x52	; 82
  b2:	fe 4f       	sbci	r31, 0xFE	; 254
  b4:	40 83       	st	Z, r20
void update_(void){
	unsigned char _value_pre=PINB&0x0f;
	if(_value_pre!=_value_in){
		_value_in=_value_pre;
		_moveanimation=0;
		for(unsigned char _mask=0; _mask<4;_mask++){
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	24 30       	cpi	r18, 0x04	; 4
  ba:	70 f3       	brcs	.-36     	; 0x98 <update_+0x18>
  bc:	08 95       	ret

000000be <main>:
void setup_(void);
void update_(void);

int main(void)
{
	setup_();
  be:	cf df       	rcall	.-98     	; 0x5e <setup_>
    /* Replace with your application code */
    while (1) 
    {
		update_();
  c0:	df df       	rcall	.-66     	; 0x80 <update_>
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x2>

000000c4 <__vector_6>:
			_text_4digit[_mask]=_text[_value_in][_mask];
		}
	}
}

ISR(TIMER1_COMPA_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	if(++_display_repeat==5){
  e4:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <_display_repeat>
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <_display_repeat>
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	09 f0       	breq	.+2      	; 0xf4 <__vector_6+0x30>
  f2:	bb c0       	rjmp	.+374    	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
		_display_repeat=0;
  f4:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <_display_repeat>
		PORTB=0xff;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	88 bb       	out	0x18, r24	; 24
		PORTC=0;
  fc:	15 ba       	out	0x15, r1	; 21
		PORTD=0;
  fe:	12 ba       	out	0x12, r1	; 18
		PORTB=~(1<<(4+_digit));
 100:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <_digit>
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	2c 5f       	subi	r18, 0xFC	; 252
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__vector_6+0x50>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	2a 95       	dec	r18
 116:	e2 f7       	brpl	.-8      	; 0x110 <__vector_6+0x4c>
 118:	80 95       	com	r24
 11a:	88 bb       	out	0x18, r24	; 24
		if(_text_4digit[_digit]>='0'&&_text_4digit[_digit]<='9'){//if number
 11c:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <_digit>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	e2 55       	subi	r30, 0x52	; 82
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	e0 81       	ld	r30, Z
 128:	80 ed       	ldi	r24, 0xD0	; 208
 12a:	8e 0f       	add	r24, r30
 12c:	8a 30       	cpi	r24, 0x0A	; 10
 12e:	e8 f4       	brcc	.+58     	; 0x16a <__vector_6+0xa6>
			PORTC=_14segment[_text_4digit[_digit]-0x30];
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	f0 97       	sbiw	r30, 0x30	; 48
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e0 5a       	subi	r30, 0xA0	; 160
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	80 81       	ld	r24, Z
 13e:	85 bb       	out	0x15, r24	; 21
			PORTD=_14segment[_text_4digit[_digit]-0x30]>>7;
 140:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <_digit>
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	e2 55       	subi	r30, 0x52	; 82
 148:	fe 4f       	sbci	r31, 0xFE	; 254
 14a:	e0 81       	ld	r30, Z
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	f0 97       	sbiw	r30, 0x30	; 48
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	e0 5a       	subi	r30, 0xA0	; 160
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	88 0f       	add	r24, r24
 15e:	89 2f       	mov	r24, r25
 160:	88 1f       	adc	r24, r24
 162:	99 0b       	sbc	r25, r25
 164:	91 95       	neg	r25
 166:	82 bb       	out	0x12, r24	; 18
 168:	20 c0       	rjmp	.+64     	; 0x1aa <__vector_6+0xe6>
		}
		else if(_text_4digit[_digit]>='A'&&_text_4digit[_digit]<='Z'){//if ENGLISH
 16a:	8f eb       	ldi	r24, 0xBF	; 191
 16c:	8e 0f       	add	r24, r30
 16e:	8a 31       	cpi	r24, 0x1A	; 26
 170:	e0 f4       	brcc	.+56     	; 0x1aa <__vector_6+0xe6>
			PORTC=_14segment[_text_4digit[_digit]-0x41+10];
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	f7 97       	sbiw	r30, 0x37	; 55
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e0 5a       	subi	r30, 0xA0	; 160
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	80 81       	ld	r24, Z
 180:	85 bb       	out	0x15, r24	; 21
			PORTD=_14segment[_text_4digit[_digit]-0x41+10]>>7;
 182:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <_digit>
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e2 55       	subi	r30, 0x52	; 82
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	e0 81       	ld	r30, Z
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	f7 97       	sbiw	r30, 0x37	; 55
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e0 5a       	subi	r30, 0xA0	; 160
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	80 81       	ld	r24, Z
 19c:	91 81       	ldd	r25, Z+1	; 0x01
 19e:	88 0f       	add	r24, r24
 1a0:	89 2f       	mov	r24, r25
 1a2:	88 1f       	adc	r24, r24
 1a4:	99 0b       	sbc	r25, r25
 1a6:	91 95       	neg	r25
 1a8:	82 bb       	out	0x12, r24	; 18
		}
		
		if(_digit<3){
 1aa:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <_digit>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	20 f4       	brcc	.+8      	; 0x1ba <__vector_6+0xf6>
			_digit++;
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_digit>
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_6+0xfa>
		}
		else{
			_digit=0;
 1ba:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <_digit>
		}
		if(++_animation_repeat==50){
 1be:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
 1c2:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__data_end+0x1>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
 1cc:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
 1d0:	c2 97       	sbiw	r24, 0x32	; 50
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <__vector_6+0x112>
 1d4:	4a c0       	rjmp	.+148    	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
			_animation_repeat=0;
 1d6:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__data_end+0x1>
 1da:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
			if(_moveanimation+3<=strlen((char *)_text[_value_in])){
 1de:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <_moveanimation>
 1e2:	82 2f       	mov	r24, r18
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	03 96       	adiw	r24, 0x03	; 3
 1e8:	60 91 ac 01 	lds	r22, 0x01AC	; 0x8001ac <_value_in>
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	db 01       	movw	r26, r22
 1f0:	00 24       	eor	r0, r0
 1f2:	b6 95       	lsr	r27
 1f4:	a7 95       	ror	r26
 1f6:	07 94       	ror	r0
 1f8:	b6 95       	lsr	r27
 1fa:	a7 95       	ror	r26
 1fc:	07 94       	ror	r0
 1fe:	ba 2f       	mov	r27, r26
 200:	a0 2d       	mov	r26, r0
 202:	a8 55       	subi	r26, 0x58	; 88
 204:	bf 4f       	sbci	r27, 0xFF	; 255
 206:	fd 01       	movw	r30, r26
 208:	01 90       	ld	r0, Z+
 20a:	00 20       	and	r0, r0
 20c:	e9 f7       	brne	.-6      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	ea 1b       	sub	r30, r26
 212:	fb 0b       	sbc	r31, r27
 214:	e8 17       	cp	r30, r24
 216:	f9 07       	cpc	r31, r25
 218:	28 f0       	brcs	.+10     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
				_moveanimation++;
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <_moveanimation>
			_text_4digit[_mask]=_text[_value_in][_mask];
		}
	}
}

ISR(TIMER1_COMPA_vect){
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	21 c0       	rjmp	.+66     	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
			_animation_repeat=0;
			if(_moveanimation+3<=strlen((char *)_text[_value_in])){
				_moveanimation++;
			}
			else{	
				_moveanimation=0;
 224:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <_moveanimation>
 228:	fb cf       	rjmp	.-10     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
			}
			for(unsigned char _mask=0; _mask<4;_mask++){
				_text_4digit[_mask]=_text[_value_in][(_mask+_moveanimation)%4];
 22a:	24 2f       	mov	r18, r20
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <_moveanimation>
 232:	f9 01       	movw	r30, r18
 234:	e8 0f       	add	r30, r24
 236:	f1 1d       	adc	r31, r1
 238:	cf 01       	movw	r24, r30
 23a:	83 70       	andi	r24, 0x03	; 3
 23c:	99 27       	eor	r25, r25
 23e:	fb 01       	movw	r30, r22
 240:	00 24       	eor	r0, r0
 242:	f6 95       	lsr	r31
 244:	e7 95       	ror	r30
 246:	07 94       	ror	r0
 248:	f6 95       	lsr	r31
 24a:	e7 95       	ror	r30
 24c:	07 94       	ror	r0
 24e:	fe 2f       	mov	r31, r30
 250:	e0 2d       	mov	r30, r0
 252:	e8 55       	subi	r30, 0x58	; 88
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	e8 0f       	add	r30, r24
 258:	f9 1f       	adc	r31, r25
 25a:	80 81       	ld	r24, Z
 25c:	f9 01       	movw	r30, r18
 25e:	e2 55       	subi	r30, 0x52	; 82
 260:	fe 4f       	sbci	r31, 0xFE	; 254
 262:	80 83       	st	Z, r24
				_moveanimation++;
			}
			else{	
				_moveanimation=0;
			}
			for(unsigned char _mask=0; _mask<4;_mask++){
 264:	4f 5f       	subi	r20, 0xFF	; 255
 266:	44 30       	cpi	r20, 0x04	; 4
 268:	00 f3       	brcs	.-64     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
				_text_4digit[_mask]=_text[_value_in][(_mask+_moveanimation)%4];
			}
		}
	}
	
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
