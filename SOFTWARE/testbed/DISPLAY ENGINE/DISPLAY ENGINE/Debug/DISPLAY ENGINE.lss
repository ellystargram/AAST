
DISPLAY ENGINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800100  00000350  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e50  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000932  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000613  00000000  00000000  00001dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  000023e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000519  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c1  00000000  00000000  00002a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002f02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7b c1       	rjmp	.+758    	; 0x338 <__vector_16>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e5       	ldi	r30, 0x50	; 80
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 3a       	cpi	r26, 0xA0	; 160
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	3f d1       	rcall	.+638    	; 0x332 <main>
  b4:	4b c1       	rjmp	.+662    	; 0x34c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <spisetup_>:
}
void printcharviamax7219_(unsigned char _char){
	for(unsigned char _digit=0;_digit<8;_digit++){
		printmax7219_(_digit+1,_alphabet[_char][_digit]);
	}
}
  b8:	81 e5       	ldi	r24, 0x51	; 81
  ba:	8d b9       	out	0x0d, r24	; 13
  bc:	08 95       	ret

000000be <spitrans_>:
  be:	8f b9       	out	0x0f, r24	; 15
  c0:	8f e9       	ldi	r24, 0x9F	; 159
  c2:	9f e0       	ldi	r25, 0x0F	; 15
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <spitrans_+0x6>
  c8:	00 c0       	rjmp	.+0      	; 0xca <spitrans_+0xc>
  ca:	00 00       	nop
  cc:	77 9b       	sbis	0x0e, 7	; 14
  ce:	fe cf       	rjmp	.-4      	; 0xcc <spitrans_+0xe>
  d0:	08 95       	ret

000000d2 <printmax7219_>:
  d2:	cf 93       	push	r28
  d4:	c6 2f       	mov	r28, r22
  d6:	f3 df       	rcall	.-26     	; 0xbe <spitrans_>
  d8:	8c 2f       	mov	r24, r28
  da:	f1 df       	rcall	.-30     	; 0xbe <spitrans_>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <portbcontroler_>:
void portbcontroler_(unsigned char _bit, unsigned char _logical_value){
	unsigned char _newportb=0;
	for(unsigned char _digit=0;_digit<8;_digit++){
  e0:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char _digit=0;_digit<8;_digit++){
		printmax7219_(_digit+1,_alphabet[_char][_digit]);
	}
}
void portbcontroler_(unsigned char _bit, unsigned char _logical_value){
	unsigned char _newportb=0;
  e2:	40 e0       	ldi	r20, 0x00	; 0
	for(unsigned char _digit=0;_digit<8;_digit++){
  e4:	18 c0       	rjmp	.+48     	; 0x116 <portbcontroler_+0x36>
		if(_digit==_bit){
  e6:	98 13       	cpse	r25, r24
  e8:	0a c0       	rjmp	.+20     	; 0xfe <portbcontroler_+0x1e>
			_newportb=_newportb|(_logical_value<<_bit);
  ea:	26 2f       	mov	r18, r22
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	08 2e       	mov	r0, r24
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <portbcontroler_+0x16>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <portbcontroler_+0x12>
  fa:	42 2b       	or	r20, r18
  fc:	0b c0       	rjmp	.+22     	; 0x114 <portbcontroler_+0x34>
		}
		else{
			_newportb=_newportb|(PORTB&(1<<_digit));
  fe:	58 b3       	in	r21, 0x18	; 24
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	09 2e       	mov	r0, r25
 106:	02 c0       	rjmp	.+4      	; 0x10c <portbcontroler_+0x2c>
 108:	22 0f       	add	r18, r18
 10a:	33 1f       	adc	r19, r19
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <portbcontroler_+0x28>
 110:	25 23       	and	r18, r21
 112:	42 2b       	or	r20, r18
		printmax7219_(_digit+1,_alphabet[_char][_digit]);
	}
}
void portbcontroler_(unsigned char _bit, unsigned char _logical_value){
	unsigned char _newportb=0;
	for(unsigned char _digit=0;_digit<8;_digit++){
 114:	9f 5f       	subi	r25, 0xFF	; 255
 116:	98 30       	cpi	r25, 0x08	; 8
 118:	30 f3       	brcs	.-52     	; 0xe6 <portbcontroler_+0x6>
		}
		else{
			_newportb=_newportb|(PORTB&(1<<_digit));
		}
	}
	PORTB=_newportb;
 11a:	48 bb       	out	0x18, r20	; 24
 11c:	08 95       	ret

0000011e <update_>:
	max7219_setup_();
	TCCR0=1;
	TIMSK=(1<<TOIE0);
	sei();
}
void update_(void){
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
		printmax7219_(MAX7219_DIGIT0,)
		printcharviamax7219_(_char);
		_delay_ms(1000);
	}
	*/
	for(unsigned char _xstart=0;_xstart<48;_xstart++){
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	30 c0       	rjmp	.+96     	; 0x188 <update_+0x6a>
		for(unsigned char _y=0;_y<8;_y++){
			portbcontroler_(CS,FALSE);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	d9 df       	rcall	.-78     	; 0xe0 <portbcontroler_>
			for(unsigned char _x=_xstart;_x<_xstart+4;_x++){
 12e:	c1 2f       	mov	r28, r17
 130:	10 c0       	rjmp	.+32     	; 0x152 <update_+0x34>
				printmax7219_(_y+1,_alphabet[_x][_y]);
 132:	fc 01       	movw	r30, r24
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	ee 0f       	add	r30, r30
 13e:	ff 1f       	adc	r31, r31
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	ed 0f       	add	r30, r29
 146:	f1 1d       	adc	r31, r1
 148:	60 81       	ld	r22, Z
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	8d 0f       	add	r24, r29
 14e:	c1 df       	rcall	.-126    	; 0xd2 <printmax7219_>
	}
	*/
	for(unsigned char _xstart=0;_xstart<48;_xstart++){
		for(unsigned char _y=0;_y<8;_y++){
			portbcontroler_(CS,FALSE);
			for(unsigned char _x=_xstart;_x<_xstart+4;_x++){
 150:	cf 5f       	subi	r28, 0xFF	; 255
 152:	8c 2f       	mov	r24, r28
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	21 2f       	mov	r18, r17
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	2c 5f       	subi	r18, 0xFC	; 252
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	82 17       	cp	r24, r18
 160:	93 07       	cpc	r25, r19
 162:	3c f3       	brlt	.-50     	; 0x132 <update_+0x14>
				printmax7219_(_y+1,_alphabet[_x][_y]);
			}
			portbcontroler_(CS,TRUE);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	bb df       	rcall	.-138    	; 0xe0 <portbcontroler_>
		printcharviamax7219_(_char);
		_delay_ms(1000);
	}
	*/
	for(unsigned char _xstart=0;_xstart<48;_xstart++){
		for(unsigned char _y=0;_y<8;_y++){
 16a:	df 5f       	subi	r29, 0xFF	; 255
 16c:	01 c0       	rjmp	.+2      	; 0x170 <update_+0x52>
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	d8 30       	cpi	r29, 0x08	; 8
 172:	d0 f2       	brcs	.-76     	; 0x128 <update_+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	83 ed       	ldi	r24, 0xD3	; 211
 178:	90 e3       	ldi	r25, 0x30	; 48
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <update_+0x5c>
 182:	00 c0       	rjmp	.+0      	; 0x184 <update_+0x66>
 184:	00 00       	nop
		printmax7219_(MAX7219_DIGIT0,)
		printcharviamax7219_(_char);
		_delay_ms(1000);
	}
	*/
	for(unsigned char _xstart=0;_xstart<48;_xstart++){
 186:	1f 5f       	subi	r17, 0xFF	; 255
 188:	10 33       	cpi	r17, 0x30	; 48
 18a:	88 f3       	brcs	.-30     	; 0x16e <update_+0x50>
			portbcontroler_(CS,TRUE);
		}
		_delay_ms(1000);
	}
	
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	08 95       	ret

00000194 <max7219_setup_>:
void spitrans_(unsigned char _data){
	SPDR=_data;
	_delay_ms(1);
	while(!(SPSR&(1<<SPIF)));
}
void max7219_setup_(void) {
 194:	cf 93       	push	r28
	portbcontroler_(CS,FALSE);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	a2 df       	rcall	.-188    	; 0xe0 <portbcontroler_>
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 19c:	c0 e0       	ldi	r28, 0x00	; 0
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <max7219_setup_+0x14>
		printmax7219_(MAX7219_TEST, 0x00);     // 테스트 모드 비활성화
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	8f e0       	ldi	r24, 0x0F	; 15
 1a4:	96 df       	rcall	.-212    	; 0xd2 <printmax7219_>
	_delay_ms(1);
	while(!(SPSR&(1<<SPIF)));
}
void max7219_setup_(void) {
	portbcontroler_(CS,FALSE);
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	c4 30       	cpi	r28, 0x04	; 4
 1aa:	d0 f3       	brcs	.-12     	; 0x1a0 <max7219_setup_+0xc>
		printmax7219_(MAX7219_TEST, 0x00);     // 테스트 모드 비활성화
	}
	portbcontroler_(CS,TRUE);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	97 df       	rcall	.-210    	; 0xe0 <portbcontroler_>
	
	portbcontroler_(CS,FALSE);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	94 df       	rcall	.-216    	; 0xe0 <portbcontroler_>
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <max7219_setup_+0x30>
		printmax7219_(MAX7219_SCANLIM, 0x07);   // 모든 자리 활성화 (0 ~ 7)
 1bc:	67 e0       	ldi	r22, 0x07	; 7
 1be:	8b e0       	ldi	r24, 0x0B	; 11
 1c0:	88 df       	rcall	.-240    	; 0xd2 <printmax7219_>
 1c2:	cf 5f       	subi	r28, 0xFF	; 255
		printmax7219_(MAX7219_TEST, 0x00);     // 테스트 모드 비활성화
	}
	portbcontroler_(CS,TRUE);
	
	portbcontroler_(CS,FALSE);
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 1c4:	c4 30       	cpi	r28, 0x04	; 4
 1c6:	d0 f3       	brcs	.-12     	; 0x1bc <max7219_setup_+0x28>
		printmax7219_(MAX7219_SCANLIM, 0x07);   // 모든 자리 활성화 (0 ~ 7)
	}
	portbcontroler_(CS,TRUE);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	89 df       	rcall	.-238    	; 0xe0 <portbcontroler_>
	
	portbcontroler_(CS,FALSE);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	86 df       	rcall	.-244    	; 0xe0 <portbcontroler_>
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <max7219_setup_+0x4c>
		printmax7219_(MAX7219_DECODE, 0x00);   // 디코더 모드 비활성화
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	89 e0       	ldi	r24, 0x09	; 9
 1dc:	7a df       	rcall	.-268    	; 0xd2 <printmax7219_>
		printmax7219_(MAX7219_SCANLIM, 0x07);   // 모든 자리 활성화 (0 ~ 7)
	}
	portbcontroler_(CS,TRUE);
	
	portbcontroler_(CS,FALSE);
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 1de:	cf 5f       	subi	r28, 0xFF	; 255
 1e0:	c4 30       	cpi	r28, 0x04	; 4
		printmax7219_(MAX7219_DECODE, 0x00);   // 디코더 모드 비활성화
	}
	portbcontroler_(CS,TRUE);
 1e2:	d0 f3       	brcs	.-12     	; 0x1d8 <max7219_setup_+0x44>
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	80 e0       	ldi	r24, 0x00	; 0
	
	portbcontroler_(CS,FALSE);
 1e8:	7b df       	rcall	.-266    	; 0xe0 <portbcontroler_>
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	78 df       	rcall	.-272    	; 0xe0 <portbcontroler_>
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
		printmax7219_(MAX7219_INTEN, 0x00);    // 중단 모드 비활성화
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <max7219_setup_+0x68>
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
		printmax7219_(MAX7219_DECODE, 0x00);   // 디코더 모드 비활성화
	}
	portbcontroler_(CS,TRUE);
	
	portbcontroler_(CS,FALSE);
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 1f8:	6c df       	rcall	.-296    	; 0xd2 <printmax7219_>
 1fa:	cf 5f       	subi	r28, 0xFF	; 255
		printmax7219_(MAX7219_INTEN, 0x00);    // 중단 모드 비활성화
	}
	portbcontroler_(CS,TRUE);
 1fc:	c4 30       	cpi	r28, 0x04	; 4
 1fe:	d0 f3       	brcs	.-12     	; 0x1f4 <max7219_setup_+0x60>
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	80 e0       	ldi	r24, 0x00	; 0
	
	portbcontroler_(CS,FALSE);
 204:	6d df       	rcall	.-294    	; 0xe0 <portbcontroler_>
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 20a:	6a df       	rcall	.-300    	; 0xe0 <portbcontroler_>
		printmax7219_(MAX7219_SHUTDOWN, 0x01); // 셧다운 모드 해제
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	04 c0       	rjmp	.+8      	; 0x218 <max7219_setup_+0x84>
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	8c e0       	ldi	r24, 0x0C	; 12
		printmax7219_(MAX7219_INTEN, 0x00);    // 중단 모드 비활성화
	}
	portbcontroler_(CS,TRUE);
	
	portbcontroler_(CS,FALSE);
	for(unsigned char _repeat=0;_repeat<4;_repeat++){
 214:	5e df       	rcall	.-324    	; 0xd2 <printmax7219_>
 216:	cf 5f       	subi	r28, 0xFF	; 255
 218:	c4 30       	cpi	r28, 0x04	; 4
		printmax7219_(MAX7219_SHUTDOWN, 0x01); // 셧다운 모드 해제
	}
	portbcontroler_(CS,TRUE);
 21a:	d0 f3       	brcs	.-12     	; 0x210 <max7219_setup_+0x7c>
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	5f df       	rcall	.-322    	; 0xe0 <portbcontroler_>
	
	
	
	portbcontroler_(CS,TRUE);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	5c df       	rcall	.-328    	; 0xe0 <portbcontroler_>
 228:	cf 91       	pop	r28
}
 22a:	08 95       	ret

0000022c <getbitofbyte_>:
 22c:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	PORTB=_newportb;
}
unsigned char getbitofbyte_(unsigned char _byte, unsigned char _bit){
	return (_byte>>_bit)&0x01;
 22e:	02 c0       	rjmp	.+4      	; 0x234 <getbitofbyte_+0x8>
 230:	95 95       	asr	r25
 232:	87 95       	ror	r24
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <getbitofbyte_+0x4>
}
 238:	81 70       	andi	r24, 0x01	; 1
 23a:	08 95       	ret

0000023c <cwrotate__>:
		}
		_delay_ms(1000);
	}
	
}
void cwrotate__(unsigned char* __origin){
 23c:	bf 92       	push	r11
 23e:	cf 92       	push	r12
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	28 97       	sbiw	r28, 0x08	; 8
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
 25e:	7c 01       	movw	r14, r24
	unsigned char _drawboard[8]={0,};
 260:	fe 01       	movw	r30, r28
 262:	31 96       	adiw	r30, 0x01	; 1
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	df 01       	movw	r26, r30
 268:	1d 92       	st	X+, r1
 26a:	8a 95       	dec	r24
 26c:	e9 f7       	brne	.-6      	; 0x268 <cwrotate__+0x2c>
	for(unsigned char _y=0;_y<8;_y++){
 26e:	c1 2c       	mov	r12, r1
 270:	20 c0       	rjmp	.+64     	; 0x2b2 <cwrotate__+0x76>
		for(unsigned char _x=0;_x<8;_x++){
			_drawboard[_y]=_drawboard[_y]|(getbitofbyte_(__origin[_x],(7-_y))<<_x);
 272:	01 e0       	ldi	r16, 0x01	; 1
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	0c 0f       	add	r16, r28
 278:	1d 1f       	adc	r17, r29
 27a:	0c 0d       	add	r16, r12
 27c:	11 1d       	adc	r17, r1
 27e:	f8 01       	movw	r30, r16
 280:	b0 80       	ld	r11, Z
 282:	f7 01       	movw	r30, r14
 284:	ed 0d       	add	r30, r13
 286:	f1 1d       	adc	r31, r1
 288:	67 e0       	ldi	r22, 0x07	; 7
 28a:	6c 19       	sub	r22, r12
 28c:	80 81       	ld	r24, Z
 28e:	ce df       	rcall	.-100    	; 0x22c <getbitofbyte_>
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0d 2c       	mov	r0, r13
 294:	02 c0       	rjmp	.+4      	; 0x29a <cwrotate__+0x5e>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <cwrotate__+0x5a>
 29e:	8b 29       	or	r24, r11
 2a0:	d8 01       	movw	r26, r16
 2a2:	8c 93       	st	X, r24
	
}
void cwrotate__(unsigned char* __origin){
	unsigned char _drawboard[8]={0,};
	for(unsigned char _y=0;_y<8;_y++){
		for(unsigned char _x=0;_x<8;_x++){
 2a4:	d3 94       	inc	r13
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <cwrotate__+0x6e>
 2a8:	d1 2c       	mov	r13, r1
 2aa:	b7 e0       	ldi	r27, 0x07	; 7
 2ac:	bd 15       	cp	r27, r13
 2ae:	08 f7       	brcc	.-62     	; 0x272 <cwrotate__+0x36>
	}
	
}
void cwrotate__(unsigned char* __origin){
	unsigned char _drawboard[8]={0,};
	for(unsigned char _y=0;_y<8;_y++){
 2b0:	c3 94       	inc	r12
 2b2:	e7 e0       	ldi	r30, 0x07	; 7
 2b4:	ec 15       	cp	r30, r12
 2b6:	c0 f7       	brcc	.-16     	; 0x2a8 <cwrotate__+0x6c>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <cwrotate__+0x9c>
		for(unsigned char _x=0;_x<8;_x++){
			_drawboard[_y]=_drawboard[_y]|(getbitofbyte_(__origin[_x],(7-_y))<<_x);
		}
	}
	for(unsigned char _duplicate=0;_duplicate<8;_duplicate++){
		__origin[_duplicate]=_drawboard[_duplicate];
 2bc:	82 2f       	mov	r24, r18
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	f7 01       	movw	r30, r14
 2c2:	e8 0f       	add	r30, r24
 2c4:	f9 1f       	adc	r31, r25
 2c6:	a1 e0       	ldi	r26, 0x01	; 1
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	ac 0f       	add	r26, r28
 2cc:	bd 1f       	adc	r27, r29
 2ce:	a8 0f       	add	r26, r24
 2d0:	b9 1f       	adc	r27, r25
 2d2:	8c 91       	ld	r24, X
 2d4:	80 83       	st	Z, r24
	for(unsigned char _y=0;_y<8;_y++){
		for(unsigned char _x=0;_x<8;_x++){
			_drawboard[_y]=_drawboard[_y]|(getbitofbyte_(__origin[_x],(7-_y))<<_x);
		}
	}
	for(unsigned char _duplicate=0;_duplicate<8;_duplicate++){
 2d6:	2f 5f       	subi	r18, 0xFF	; 255
 2d8:	28 30       	cpi	r18, 0x08	; 8
 2da:	80 f3       	brcs	.-32     	; 0x2bc <cwrotate__+0x80>
		__origin[_duplicate]=_drawboard[_duplicate];
	}
}
 2dc:	28 96       	adiw	r28, 0x08	; 8
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	ff 90       	pop	r15
 2f2:	ef 90       	pop	r14
 2f4:	df 90       	pop	r13
 2f6:	cf 90       	pop	r12
 2f8:	bf 90       	pop	r11
 2fa:	08 95       	ret

000002fc <setup_>:
		update_();
		
	}
}

void setup_(void){
 2fc:	cf 93       	push	r28
	for(unsigned char _rotate=0;_rotate<52;_rotate++){
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
 300:	0c c0       	rjmp	.+24     	; 0x31a <setup_+0x1e>
		cwrotate__(_alphabet[_rotate]);
 302:	8c 2f       	mov	r24, r28
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	80 50       	subi	r24, 0x00	; 0
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	92 df       	rcall	.-220    	; 0x23c <cwrotate__>
		
	}
}

void setup_(void){
	for(unsigned char _rotate=0;_rotate<52;_rotate++){
 318:	cf 5f       	subi	r28, 0xFF	; 255
 31a:	c4 33       	cpi	r28, 0x34	; 52
 31c:	90 f3       	brcs	.-28     	; 0x302 <setup_+0x6>
		cwrotate__(_alphabet[_rotate]);
	}
	DDRB=(1<<CS)|(1<<DIN)|(1<<CLK);
 31e:	87 e0       	ldi	r24, 0x07	; 7
	spisetup_();
 320:	87 bb       	out	0x17, r24	; 23
	max7219_setup_();
 322:	ca de       	rcall	.-620    	; 0xb8 <spisetup_>
 324:	37 df       	rcall	.-402    	; 0x194 <max7219_setup_>
	TCCR0=1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	83 bf       	out	0x33, r24	; 51
	TIMSK=(1<<TOIE0);
 32a:	87 bf       	out	0x37, r24	; 55
	sei();
 32c:	78 94       	sei
}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <main>:
	{0x00, 0x00, 0xb8, 0xa0, 0xa0, 0xf8, 0x00, 0x00},//y
	{0x00, 0x00, 0x90, 0xd0, 0xb0, 0x90, 0x00, 0x00},//z
};

int main(void){
	setup_();
 332:	e4 df       	rcall	.-56     	; 0x2fc <setup_>
	while(TRUE){
		update_();
 334:	f4 de       	rcall	.-536    	; 0x11e <update_>
 336:	fe cf       	rjmp	.-4      	; 0x334 <main+0x2>

00000338 <__vector_16>:
 338:	1f 92       	push	r1
}
unsigned char getbitofbyte_(unsigned char _byte, unsigned char _bit){
	return (_byte>>_bit)&0x01;
}

ISR(TIMER0_OVF_vect){
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
	
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
